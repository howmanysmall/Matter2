local ArrayQueue = require(script.ArrayQueue)
local LinkedQueue1 = require(script.LinkedQueue1)
local LinkedQueue2 = require(script.LinkedQueue2)

type Library = typeof(ArrayQueue)

type Profiler = {
	Begin: (Name: string) -> (),
	End: () -> (),
}

local function _CreateFunction(Library: Library)
	return function(Profiler: Profiler, Value: number)
		Profiler.Begin("Construction")
		local Object = Library.new()
		Profiler.End()

		Profiler.Begin("Push")
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Object:Push(Value)
		Profiler.End()

		Profiler.Begin("Pop")
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Object:Pop()
		Profiler.End()
	end
end

local RUN = 10000

local function CreateFunctionNoProfile(Library: Library)
	return function()
		local Object = Library.new()
		for Index = 1, RUN do
			Object:Push(Index)
			Object:Pop()
		end
	end
end

return {
	ParameterGenerator = function()
		return math.random(1000) / 10
	end;

	Functions = {
		["Matter Queue"] = CreateFunctionNoProfile(LinkedQueue1);
		["Matter Queue (optimized)"] = CreateFunctionNoProfile(LinkedQueue2);
		["DataStructures Queue"] = CreateFunctionNoProfile(ArrayQueue);
	};
}
